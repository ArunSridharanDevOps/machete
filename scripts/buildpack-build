#!/bin/bash
set -eo pipefail
trap 'echo "error in $0 ${BASH_SOURCE} ${LINENO}"' ERR

stack=cflinuxfs2
mode=cached
should_build=true
should_upload=true
rspec_options=cf_spec
host=""

usage() {
  echo "Usage: buildpack-build

  Options:
      [--stack=STACK]       # Specifies the stack that the test will run against.
                            # Default: cflinuxfs2
                            # Possible values: cflinuxfs2
      [--host=HOST]         # Specifies the host to target for running tests.
                            # Example: ci=8.example.com
      [--cached]            # Specifies the test run of a buildpack with vendored dependencies
                            # Default: true
      [--uncached]          # Specifies the test run of a buildpack without vendored dependencies
                            # Default: false
      [--no-build]          # Specifies whether to build the targeted buildpack.
                            # Default: false
      [--no-upload]         # Specifies whether to upload local buildpack to cf. Overrides '--no-build' flag to true.
                            # Default: false

  Builds, uploads, and runs tests against a specified BUILDPACK.
  Any other supplied arguments will be passed as rspec arguments!"
  exit 1
}

indent() {
  echo -e "\n******* $1"
}

detect_language() {
  if [ "$language" == "" ]; then
    indent "Detecting language"
    language=$(ls ${buildpack_file_pattern} | cut -d_ -f1)
    indent "Language detected: ${language}"
  fi
}

disable_buildpacks() {
  cf buildpacks | while read line
  do
    buildpack_attributes=($line)
    buildpack_name=${buildpack_attributes[0]}
    buildpack_enabled=${buildpack_attributes[2]}

    if [ "$buildpack_enabled" == "true" ]; then
      cf update-buildpack $buildpack_name --disable 1>&2
      echo $buildpack_name
    fi
  done
}

enable_buildpacks() {
  for buildpack_name in ${machete_disabled_buildpacks[@]}
  do
    echo "Enabling $buildpack_name"
    cf update-buildpack $buildpack_name --enable
  done
  echo "Restored original buildpacks enabled/disabled configuration"
}

validate_stack_option() {
  if ([ "$stack" != "cflinuxfs2" ]); then
    echo -e 'ERROR: Invalid argument passed in for --stack option. \n' \
      'The valid --stack options are [ "cflinuxfs2" ]'
    exit 1
  fi
}

configure_stack() {
  if [ "$host" == "" ]; then
    host=local.pcfdev.io
  fi

  indent "Using the stack '$stack' against the host '$host'"
}

configure_based_on_mode() {
  if [ "$mode" == "cached" ]; then
    buildpack_file_pattern="*_buildpack-cached-v*.zip"
  else
    buildpack_file_pattern="*_buildpack-v*.zip"
  fi
}

build_new_buildpack() {
  indent "Building $mode buildpack"
  rm -f ${buildpack_file_pattern}
  BUNDLE_GEMFILE=cf.Gemfile bundle exec buildpack-packager --"$mode"
}

upload_new_buildpack() {
  indent "Uploading buildpack to CF"
  cf delete-buildpack ${language}-test-buildpack -f
  cf create-buildpack ${language}-test-buildpack ${buildpack_file_pattern} 1 --enable
}

check_compile_extensions() {
  indent "Checking compile extensions is up to date"
  if [ ! -d "compile-extensions" ]; then
    echo "No compile-extensions directory in this buildpack."
  elif [ ! "$(ls -A compile-extensions)" ]; then
    echo "WARNING: compile-extensions is empty, update the submodule!"
    exit 1
  elif [[ $(git submodule | head -c 1) = "+" ]]; then
    echo "WARNING: compile-extensions is not aligned with master"
  else
    echo "compile-extensions up to date!"
  fi
}

while [ "$#" -gt 0 ]; do
  case $1 in
    -h|-\?|--help|help)
        usage
        exit
        ;;
    --stack)
      if [ "$#" -gt 1 ]; then
        stack=$2
        validate_stack_option
        shift 2
        continue
      else
        echo 'ERROR: Must specify a non-empty "--stack STACK" argument.'
        exit 1
      fi
      ;;
    --stack=*)
      stack=${1#*=}
      validate_stack_option
      ;;
    --host=*)
      host=${1#*=}
      ;;
    --cached)
      mode=cached;;
    --uncached)
      mode=uncached;;
    --no-build)
      should_build=false;;
    --no-upload)
      should_build=false
      should_upload=false;;
    --)
      shift
      break
      ;;
    -?*)
      echo "Unrecognized option ($1) submitted"
      usage
      ;;
    *)
      rspec_options=$1;;
  esac
  shift
done

configure_based_on_mode
configure_stack

indent "Fetching CF CLI details"
which cf
cf --version

if [ "$should_build" == "true" ]; then
  check_compile_extensions
  build_new_buildpack
  detect_language
fi

indent "Connecting to CF"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
$SCRIPT_DIR/cf_login_and_setup $host

if [ "$should_upload" == "true" ]; then
  detect_language
  echo "Disabling all buildpacks"
  machete_disabled_buildpacks=($(disable_buildpacks))
  disable_buildpacks
  trap enable_buildpacks SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM EXIT
  upload_new_buildpack
fi

indent "Running specs"
BUNDLE_GEMFILE=cf.Gemfile BUILDPACK_MODE=$mode CF_STACK=$stack bundle exec rspec \
  --require rspec/instafail \
  --format RSpec::Instafail \
  --format documentation \
  --color \
  $rspec_options

if [ "$should_upload" == "true" ]; then
  enable_buildpacks
fi
