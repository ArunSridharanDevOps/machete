#!/bin/bash -l
set -eo pipefail

__indent() {
  local msg=$1
  echo "-----> $msg"
}

__ensure_space() {
  __indent "Setting up org and space"

  cf create-org pivotal
  cf create-space integration -o pivotal
  cf target -o pivotal -s integration
}

__are_you_sure() {
  echo -n $1
  read -r -p " [y/N] " response
  response=$(echo $response | tr '[:upper:]' '[:lower:]')
  if [[ $response =~ ^(no|n)$ ]]; then
    exit 1
  fi
}

__target_api() {
  __indent "Targetting CF API"

  echo $(cf api)
  __are_you_sure "Are you sure you want to use the above cf api?"
  __ensure_space
}

__target_bosh() {
  __indent "Targetting bosh"

  echo $(bosh target)
  __are_you_sure "Are you sure you want to use the above bosh target?"
}

__reset_postgres_security_groups() {
  __indent "Setting up security groups for PostgreSQL access"

  cf delete-security-group postgres-access -f
  if [ "$VAGRANT_CWD" != "" ]; then
    cf create-security-group postgres-access "./scripts/assets/postgres_security_group.json"
  else
    cf create-security-group postgres-access "./scripts/assets/aws_postgres_security_group.json"
  fi
  cf bind-security-group postgres-access pivotal integration
}

__reset_public_security_groups() {
  __indent "Setting up public security groups for egress logging"

  cf unbind-staging-security-group public_networks
  cf create-security-group public_networks_with_logging "./scripts/assets/public_networks_with_logging.json"
  cf bind-staging-security-group public_networks_with_logging
}

__ensure_internet_traffic_logging() {
  __indent "Setting up internet egress logging"

  bundle

  if [ "$VAGRANT_CWD" != "" ]; then
    __indent " with Vagrant deployment"
    bundle exec ./scripts/enable_bosh_lite_enterprise_firewall.rb
  else
    __indent " with AWS deployment"
    __reset_public_security_groups
  fi
}

__create_database_users() {

  __indent "Creating database users"

  postgres_path_command="postgres_path=\`find /var/vcap/data/packages/postgres/*/ -name bin\`"
  change_path_command="PATH=\$postgres_path:\$PATH"
  create_machete_user_command="psql -h 0.0.0.0 -U vcap -p 5524 -d postgres -c \"create user machete with encrypted password 'machete' SUPERUSER\""
  create_buildpacks_user_command="psql -h 0.0.0.0 -U vcap -p 5524 -d postgres -c \"create user buildpacks with encrypted password 'buildpacks'\""

  bosh_target_host=$(ruby -ruri -e "print URI.parse(URI.extract('`bosh target`')[0]).host")
  if [[ "$bosh_target_host" =~ ^192\.168\.50 ]]; then
    bosh ssh postgres_z1 0 --default_password p "$postgres_path_command;$change_path_command;$create_machete_user_command;$create_buildpacks_user_command"
  else
  gateway_user=${BOSH_GATEWAY_USER-'vcap'}
    bosh ssh --gateway_host $bosh_target_host --gateway_user $gateway_user postgres_z1 0 --default_password p "$postgres_path_command;$change_path_command;$create_machete_user_command;$create_buildpacks_user_command"
  fi
}


__target_bosh
__target_api

__ensure_internet_traffic_logging
__reset_postgres_security_groups
__reset_public_security_groups
__create_database_users
